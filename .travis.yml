dist: xenial
sudo: required

language: go

jobs:
  include:
    - &base-test
      stage: test
      name: "Unit test on Linux"
      go_import_path: github.com/openshift/odo
      go: "1.13.x"
      install:
        - make goget-tools
      script:
        - lsb_release -a
        - export PATH="$PATH:$GOPATH/bin"
        - make bin
        - make validate
        - make test-coverage
      after_success:
        - bash <(curl -s https://codecov.io/bash)
      
    - &windows-test
      stage: Test
      name: "Unit test on Windows"
      os: 
        - windows
      init:
      - git config --system core.longpaths true
      go_import_path: github.com/openshift/odo
      go: "1.13.x"
      install:
        - systeminfo.exe | grep '^OS'
        - choco install make
        - make goget-tools
      script:
        - export PATH="$PATH:$GOPATH/bin"
        - make bin
        - rm -r /tmp/*
        - make test
      after_success: skip

    - &osx-test
      stage: Test
      name: "Unit test on macOS"
      os:
        - osx
      go_import_path: github.com/openshift/odo
      go: "1.13.x"
      install:
        - make goget-tools
      script:
        - system_profiler SPSoftwareDataType
        - export PATH="$PATH:$GOPATH/bin"
        - make bin
        - make validate
        - make test
      after_success: skip

    - <<: *base-test
      stage: test
      name: "Generic test"
      script:
        - ./scripts/oc-cluster.sh
        - make configure-supported-311-is
        - make bin
        - sudo cp odo /usr/bin
        - odo login -u developer
        - travis_wait make test-generic
        - odo logout


    - <<: *base-test
      stage: test
      name: "Login / Logout"
      script:
        - ./scripts/oc-cluster.sh
        - make configure-supported-311-is
        - make bin
        - sudo cp odo /usr/bin
        - odo login -u developer
        - travis_wait make test-cmd-login-logout
        - odo logout


    - <<: *base-test
      stage: test
      name: "Component"
      script:
        - ./scripts/oc-cluster.sh
        - make configure-supported-311-is
        - make bin
        - sudo cp odo /usr/bin
        - odo login -u developer
        - travis_wait make test-cmd-cmp
        - odo logout

    - <<: *base-test
      stage: test
      name: "Plugin"
      script:
        - ./scripts/oc-cluster.sh
        - make configure-supported-311-is
        - make bin
        - sudo cp odo /usr/bin
        - odo login -u developer
        - travis_wait make test-plugin-handler
        - odo logout

    - <<: *base-test
      stage: test
      name: "Preference"
      script:
        - ./scripts/oc-cluster.sh
        - make configure-supported-311-is
        - make bin
        - sudo cp odo /usr/bin
        - odo login -u developer
        - travis_wait make test-cmd-pref-config
        - odo logout


    - <<: *base-test
      stage: test
      name: "URL"
      script:
        - ./scripts/oc-cluster.sh
        - make configure-supported-311-is
        - make bin
        - sudo cp odo /usr/bin
        - odo login -u developer
        - travis_wait make test-cmd-url
        - odo logout


    - <<: *base-test
      stage: test
      name: "Debug"
      script:
        - ./scripts/oc-cluster.sh
        - make configure-supported-311-is
        - make bin
        - sudo cp odo /usr/bin
        - odo login -u developer
        - travis_wait make test-cmd-debug
        - odo logout

    - <<: *base-test
      stage: test
      name: "Service"
      script:
        - ./scripts/oc-cluster.sh service-catalog
        - make configure-supported-311-is
        - make bin
        - sudo cp odo /usr/bin
        - odo login -u developer
        - travis_wait make test-cmd-service
        - odo logout

    - <<: *base-test
      stage: test
      name: "Link / Unlink"
      script:
        - ./scripts/oc-cluster.sh service-catalog
        - make configure-supported-311-is
        - make bin
        - sudo cp odo /usr/bin
        - odo login -u developer
        - travis_wait make test-cmd-link-unlink
        - odo logout

    - <<: *base-test
      stage: test
      name: "Subcommands"
      script:
        - ./scripts/oc-cluster.sh service-catalog
        - make configure-supported-311-is
        - make bin
        - sudo cp odo /usr/bin
        - odo login -u developer
        - travis_wait make test-cmd-cmp-sub
        - odo logout

    - <<: *base-test
      stage: test
      name: "Watch"
      script:
        - ./scripts/oc-cluster.sh
        - make configure-supported-311-is
        - make bin
        - sudo cp odo /usr/bin
        - odo login -u developer
        - travis_wait make test-cmd-watch
        - odo logout

    - <<: *base-test
      stage: test
      name: "Storage"
      script:
        - ./scripts/oc-cluster.sh
        - make configure-supported-311-is
        - make bin
        - sudo cp odo /usr/bin
        - odo login -u developer
        - travis_wait make test-cmd-storage
        - odo logout

    - <<: *base-test
      stage: test
      name: "Application"
      script:
        - ./scripts/oc-cluster.sh
        - make configure-supported-311-is
        - make bin
        - sudo cp odo /usr/bin
        - odo login -u developer
        - travis_wait make test-cmd-app
        - odo logout

    - <<: *base-test
      stage: test
      name: "Push"
      script:
        - ./scripts/oc-cluster.sh
        - make configure-supported-311-is
        - make bin
        - sudo cp odo /usr/bin
        - odo login -u developer
        - travis_wait make test-cmd-push
        - odo logout

    - <<: *base-test
      stage: test
      name: "Project"
      script:
        - ./scripts/oc-cluster.sh
        - make configure-supported-311-is
        - make bin
        - sudo cp odo /usr/bin
        - odo login -u developer
        - travis_wait make test-cmd-project
        - odo logout

    - <<: *base-test
      stage: test
      name: "Devfile: Config"
      script:
        - ./scripts/oc-cluster.sh
        - make configure-supported-311-is
        - make bin
        - sudo cp odo /usr/bin
        - odo login -u developer
        - travis_wait make test-cmd-devfile-config
        - odo logout


    - <<: *base-test
      stage: test
      name: "Devfile: Debug"
      script:
        - ./scripts/oc-cluster.sh
        - make configure-supported-311-is
        - make bin
        - sudo cp odo /usr/bin
        - odo login -u developer
        - travis_wait make test-cmd-devfile-debug
        - odo logout


    - <<: *base-test
      stage: test
      name: "Devfile: Storage"
      script:
        - ./scripts/oc-cluster.sh
        - make configure-supported-311-is
        - make bin
        - sudo cp odo /usr/bin
        - odo login -u developer
        - travis_wait make test-cmd-devfile-storage
        - odo logout

    - <<: *base-test
      stage: test
      name: "Devfile: URL"
      script:
        - ./scripts/oc-cluster.sh
        - make configure-supported-311-is
        - make bin
        - sudo cp odo /usr/bin
        - odo login -u developer
        - travis_wait make test-cmd-devfile-url
        - odo logout


    - <<: *base-test
      stage: test
      name: "Devfile: Catalog"
      script:
        - ./scripts/oc-cluster.sh
        - make configure-supported-311-is
        - make bin
        - sudo cp odo /usr/bin
        - odo login -u developer
        - travis_wait make test-cmd-devfile-catalog
        - odo logout

    - <<: *base-test
      stage: test
      name: "Devfile: Create"
      script:
        - ./scripts/oc-cluster.sh
        - make configure-supported-311-is
        - make bin
        - sudo cp odo /usr/bin
        - odo login -u developer
        - travis_wait make test-cmd-devfile-create
        - odo logout

    - <<: *base-test
      stage: test
      name: "Devfile: Push"
      script:
        - ./scripts/oc-cluster.sh
        - make configure-supported-311-is
        - make bin
        - sudo cp odo /usr/bin
        - odo login -u developer
        - travis_wait make test-cmd-devfile-push
        - odo logout

    - <<: *base-test
      stage: test
      name: "Devfile: Watch"
      script:
        - ./scripts/oc-cluster.sh
        - make configure-supported-311-is
        - make bin
        - sudo cp odo /usr/bin
        - odo login -u developer
        - travis_wait make test-cmd-devfile-watch
        - odo logout

    - <<: *base-test
      stage: test
      name: "Devfile: Delete"
      script:
        - ./scripts/oc-cluster.sh
        - make configure-supported-311-is
        - make bin
        - sudo cp odo /usr/bin
        - odo login -u developer
        - travis_wait make test-cmd-devfile-delete
        - odo logout

    - <<: *base-test
      stage: test
      name: "Devfile: Registry"
      script:
        - ./scripts/oc-cluster.sh
        - make configure-supported-311-is
        - make bin
        - sudo cp odo /usr/bin
        - odo login -u developer
        - travis_wait make test-cmd-devfile-registry
        - odo logout

    - <<: *base-test
      stage: test
      name: "Devfile: Test"
      script:
        - ./scripts/oc-cluster.sh
        - make configure-supported-311-is
        - make bin
        - sudo cp odo /usr/bin
        - odo login -u developer
        - travis_wait make test-cmd-devfile-test
        - odo logout

    - <<: *base-test
      stage: test
      name: "Devfile: Log"
      script:
        - ./scripts/oc-cluster.sh
        - make configure-supported-311-is
        - make bin
        - sudo cp odo /usr/bin
        - odo login -u developer
        - travis_wait make test-cmd-devfile-log
        - odo logout

    - <<: *base-test
      stage: test
      name: "Devfile: Exec"
      script:
        - ./scripts/oc-cluster.sh
        - make configure-supported-311-is
        - make bin
        - sudo cp odo /usr/bin
        - odo login -u developer
        - travis_wait make test-cmd-devfile-exec
        - odo logout

    - <<: *base-test
      stage: test
      name: "Devfile: Env"
      script:
        - ./scripts/oc-cluster.sh
        - make configure-supported-311-is
        - make bin
        - sudo cp odo /usr/bin
        - odo login -u developer
        - travis_wait make test-cmd-devfile-env
        - odo logout

    - <<: *base-test
      stage: test
      name: "End-to-End: Beta Test"
      script:
        - ./scripts/oc-cluster.sh
        - make configure-supported-311-is
        - make bin
        - sudo cp odo /usr/bin
        - odo login -u developer
        - travis_wait make test-e2e-beta
        - odo logout
    
    - <<: *base-test
      stage: test
      name: "End-to-End: Java Test"
      script:
        - ./scripts/oc-cluster.sh
        - make configure-supported-311-is
        - make bin
        - sudo cp odo /usr/bin
        - odo login -u developer
        - travis_wait make test-e2e-java
        - odo logout
    
    - <<: *base-test
      stage: test
      name: "End-to-End: Source Test"
      script:
        - ./scripts/oc-cluster.sh
        - make configure-supported-311-is
        - make bin
        - sudo cp odo /usr/bin
        - odo login -u developer
        - travis_wait make test-e2e-source
        - odo logout
    
    - <<: *base-test
      stage: test
      name: "End-to-End: Image Test"
      script:
        - ./scripts/oc-cluster.sh
        - make configure-supported-311-is
        - make bin
        - sudo cp odo /usr/bin
        - odo login -u developer
        - travis_wait make test-e2e-images
        - odo logout
    
    - <<: *base-test
      stage: test
      name: "Kubernetes - Project"
      env:
        - MINIKUBE_WANTUPDATENOTIFICATION=false
        - MINIKUBE_WANTREPORTERRORPROMPT=false
        - MINIKUBE_HOME=$HOME
        - CHANGE_MINIKUBE_NONE_USER=true
        - KUBECONFIG=$HOME/.kube/config
      before_script:
        - curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.16.1/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
        - curl -Lo minikube https://storage.googleapis.com/minikube/releases/v1.11.0/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
        - mkdir -p $HOME/.kube $HOME/.minikube
        - touch $KUBECONFIG
        - sudo minikube start --vm-driver=none --kubernetes-version=v1.16.1
        - "sudo chown -R travis: /home/travis/.minikube/"
        - sudo apt-get -qq update
        - sudo apt-get install -y socat
      script:
        - kubectl cluster-info
        - make bin
        - sudo cp odo /usr/bin
        - export KUBERNETES=true
        - travis_wait make test-cmd-project
    
    - <<: *base-test
      stage: test
      name: "Kubernetes - Devfile: Catalog"
      env:
        - MINIKUBE_WANTUPDATENOTIFICATION=false
        - MINIKUBE_WANTREPORTERRORPROMPT=false
        - MINIKUBE_HOME=$HOME
        - CHANGE_MINIKUBE_NONE_USER=true
        - KUBECONFIG=$HOME/.kube/config
      before_script:
        - curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.16.1/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
        - curl -Lo minikube https://storage.googleapis.com/minikube/releases/v1.11.0/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
        - mkdir -p $HOME/.kube $HOME/.minikube
        - touch $KUBECONFIG
        - sudo minikube start --vm-driver=none --kubernetes-version=v1.16.1
        - "sudo chown -R travis: /home/travis/.minikube/"
        - sudo apt-get -qq update
        - sudo apt-get install -y socat
      script:
        - kubectl cluster-info
        - make bin
        - sudo cp odo /usr/bin
        - export KUBERNETES=true
        - travis_wait make test-cmd-devfile-catalog
    
    - <<: *base-test
      stage: test
      name: "Kubernetes - Devfile: Watch"
      env:
        - MINIKUBE_WANTUPDATENOTIFICATION=false
        - MINIKUBE_WANTREPORTERRORPROMPT=false
        - MINIKUBE_HOME=$HOME
        - CHANGE_MINIKUBE_NONE_USER=true
        - KUBECONFIG=$HOME/.kube/config
      before_script:
        - curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.16.1/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
        - curl -Lo minikube https://storage.googleapis.com/minikube/releases/v1.11.0/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
        - mkdir -p $HOME/.kube $HOME/.minikube
        - touch $KUBECONFIG
        - sudo minikube start --vm-driver=none --kubernetes-version=v1.16.1
        - "sudo chown -R travis: /home/travis/.minikube/"
        - sudo apt-get -qq update
        - sudo apt-get install -y socat
      script:
        - kubectl cluster-info
        - make bin
        - sudo cp odo /usr/bin
        - export KUBERNETES=true
        - travis_wait make test-cmd-devfile-watch
    
    - <<: *base-test
      stage: test
      name: "Kubernetes - Devfile: Push"
      env:
        - MINIKUBE_WANTUPDATENOTIFICATION=false
        - MINIKUBE_WANTREPORTERRORPROMPT=false
        - MINIKUBE_HOME=$HOME
        - CHANGE_MINIKUBE_NONE_USER=true
        - KUBECONFIG=$HOME/.kube/config
      before_script:
        - curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.16.1/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
        - curl -Lo minikube https://storage.googleapis.com/minikube/releases/v1.11.0/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
        - mkdir -p $HOME/.kube $HOME/.minikube
        - touch $KUBECONFIG
        - sudo minikube start --vm-driver=none --kubernetes-version=v1.16.1
        - "sudo chown -R travis: /home/travis/.minikube/"
        - sudo apt-get -qq update
        - sudo apt-get install -y socat
      script:
        - kubectl cluster-info
        - make bin
        - sudo cp odo /usr/bin
        - export KUBERNETES=true
        - travis_wait make test-cmd-devfile-push
    
    - <<: *base-test
      stage: test
      name: "Kubernetes - Devfile: Debug"
      env:
        - MINIKUBE_WANTUPDATENOTIFICATION=false
        - MINIKUBE_WANTREPORTERRORPROMPT=false
        - MINIKUBE_HOME=$HOME
        - CHANGE_MINIKUBE_NONE_USER=true
        - KUBECONFIG=$HOME/.kube/config
      before_script:
        - curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.16.1/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
        - curl -Lo minikube https://storage.googleapis.com/minikube/releases/v1.11.0/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
        - mkdir -p $HOME/.kube $HOME/.minikube
        - touch $KUBECONFIG
        - sudo minikube start --vm-driver=none --kubernetes-version=v1.16.1
        - "sudo chown -R travis: /home/travis/.minikube/"
        - sudo apt-get -qq update
        - sudo apt-get install -y socat
      script:
        - kubectl cluster-info
        - make bin
        - sudo cp odo /usr/bin
        - export KUBERNETES=true
        - travis_wait make test-cmd-devfile-debug
    
    - <<: *base-test
      stage: test
      name: "Kubernetes - Devfile: Exec"
      env:
        - MINIKUBE_WANTUPDATENOTIFICATION=false
        - MINIKUBE_WANTREPORTERRORPROMPT=false
        - MINIKUBE_HOME=$HOME
        - CHANGE_MINIKUBE_NONE_USER=true
        - KUBECONFIG=$HOME/.kube/config
      before_script:
        - curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.16.1/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
        - curl -Lo minikube https://storage.googleapis.com/minikube/releases/v1.11.0/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
        - mkdir -p $HOME/.kube $HOME/.minikube
        - touch $KUBECONFIG
        - sudo minikube start --vm-driver=none --kubernetes-version=v1.16.1
        - "sudo chown -R travis: /home/travis/.minikube/"
        - sudo apt-get -qq update
        - sudo apt-get install -y socat
      script:
        - kubectl cluster-info
        - make bin
        - sudo cp odo /usr/bin
        - export KUBERNETES=true
        - travis_wait make test-cmd-devfile-exec
    
    - <<: *base-test
      stage: test
      name: "Kubernetes - Devfile: Delete"
      env:
        - MINIKUBE_WANTUPDATENOTIFICATION=false
        - MINIKUBE_WANTREPORTERRORPROMPT=false
        - MINIKUBE_HOME=$HOME
        - CHANGE_MINIKUBE_NONE_USER=true
        - KUBECONFIG=$HOME/.kube/config
      before_script:
        - curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.16.1/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
        - curl -Lo minikube https://storage.googleapis.com/minikube/releases/v1.11.0/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
        - mkdir -p $HOME/.kube $HOME/.minikube
        - touch $KUBECONFIG
        - sudo minikube start --vm-driver=none --kubernetes-version=v1.16.1
        - "sudo chown -R travis: /home/travis/.minikube/"
        - sudo apt-get -qq update
        - sudo apt-get install -y socat
      script:
        - kubectl cluster-info
        - make bin
        - sudo cp odo /usr/bin
        - export KUBERNETES=true
        - travis_wait make test-cmd-devfile-delete
    
    - <<: *base-test
      stage: test
      name: "Kubernetes - Devfile: Create"
      env:
        - MINIKUBE_WANTUPDATENOTIFICATION=false
        - MINIKUBE_WANTREPORTERRORPROMPT=false
        - MINIKUBE_HOME=$HOME
        - CHANGE_MINIKUBE_NONE_USER=true
        - KUBECONFIG=$HOME/.kube/config
      before_script:
        - curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.16.1/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
        - curl -Lo minikube https://storage.googleapis.com/minikube/releases/v1.11.0/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
        - mkdir -p $HOME/.kube $HOME/.minikube
        - touch $KUBECONFIG
        - sudo minikube start --vm-driver=none --kubernetes-version=v1.16.1
        - "sudo chown -R travis: /home/travis/.minikube/"
        - sudo apt-get -qq update
        - sudo apt-get install -y socat
      script:
        - kubectl cluster-info
        - make bin
        - sudo cp odo /usr/bin
        - export KUBERNETES=true
        - travis_wait make test-cmd-devfile-create
    
    - <<: *base-test
      stage: test
      name: "Kubernetes - Devfile: URL"
      env:
        - MINIKUBE_WANTUPDATENOTIFICATION=false
        - MINIKUBE_WANTREPORTERRORPROMPT=false
        - MINIKUBE_HOME=$HOME
        - CHANGE_MINIKUBE_NONE_USER=true
        - KUBECONFIG=$HOME/.kube/config
      before_script:
        - curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.16.1/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
        - curl -Lo minikube https://storage.googleapis.com/minikube/releases/v1.11.0/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
        - mkdir -p $HOME/.kube $HOME/.minikube
        - touch $KUBECONFIG
        - sudo minikube start --vm-driver=none --kubernetes-version=v1.16.1
        - "sudo chown -R travis: /home/travis/.minikube/"
        - sudo apt-get -qq update
        - sudo apt-get install -y socat
      script:
        - kubectl cluster-info
        - make bin
        - sudo cp odo /usr/bin
        - export KUBERNETES=true
        - travis_wait make test-cmd-devfile-url
    
    - <<: *base-test
      stage: test
      name: "Kubernetes - Devfile: Test"
      env:
        - MINIKUBE_WANTUPDATENOTIFICATION=false
        - MINIKUBE_WANTREPORTERRORPROMPT=false
        - MINIKUBE_HOME=$HOME
        - CHANGE_MINIKUBE_NONE_USER=true
        - KUBECONFIG=$HOME/.kube/config
      before_script:
        - curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.16.1/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
        - curl -Lo minikube https://storage.googleapis.com/minikube/releases/v1.11.0/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
        - mkdir -p $HOME/.kube $HOME/.minikube
        - touch $KUBECONFIG
        - sudo minikube start --vm-driver=none --kubernetes-version=v1.16.1
        - "sudo chown -R travis: /home/travis/.minikube/"
        - sudo apt-get -qq update
        - sudo apt-get install -y socat
      script:
        - kubectl cluster-info
        - make bin
        - sudo cp odo /usr/bin
        - export KUBERNETES=true
        - travis_wait make test-cmd-devfile-test
    
    - <<: *base-test
      stage: test
      name: "Kubernetes - Devfile: Log"
      env:
        - MINIKUBE_WANTUPDATENOTIFICATION=false
        - MINIKUBE_WANTREPORTERRORPROMPT=false
        - MINIKUBE_HOME=$HOME
        - CHANGE_MINIKUBE_NONE_USER=true
        - KUBECONFIG=$HOME/.kube/config
      before_script:
        - curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.16.1/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
        - curl -Lo minikube https://storage.googleapis.com/minikube/releases/v1.11.0/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
        - mkdir -p $HOME/.kube $HOME/.minikube
        - touch $KUBECONFIG
        - sudo minikube start --vm-driver=none --kubernetes-version=v1.16.1
        - "sudo chown -R travis: /home/travis/.minikube/"
        - sudo apt-get -qq update
        - sudo apt-get install -y socat
      script:
        - kubectl cluster-info
        - make bin
        - sudo cp odo /usr/bin
        - export KUBERNETES=true
        - travis_wait make test-cmd-devfile-log
    
    - <<: *base-test
      stage: test
      name: "Kubernetes - Devfile: Storage"
      env:
        - MINIKUBE_WANTUPDATENOTIFICATION=false
        - MINIKUBE_WANTREPORTERRORPROMPT=false
        - MINIKUBE_HOME=$HOME
        - CHANGE_MINIKUBE_NONE_USER=true
        - KUBECONFIG=$HOME/.kube/config
      before_script:
        - curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.16.1/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
        - curl -Lo minikube https://storage.googleapis.com/minikube/releases/v1.11.0/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
        - mkdir -p $HOME/.kube $HOME/.minikube
        - touch $KUBECONFIG
        - sudo minikube start --vm-driver=none --kubernetes-version=v1.16.1
        - "sudo chown -R travis: /home/travis/.minikube/"
        - sudo apt-get -qq update
        - sudo apt-get install -y socat
      script:
        - kubectl cluster-info
        - make bin
        - sudo cp odo /usr/bin
        - export KUBERNETES=true
        - travis_wait make test-cmd-devfile-storage
